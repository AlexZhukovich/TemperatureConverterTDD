apply plugin: 'com.android.application'
apply plugin: 'android-apt'
apply plugin: 'jacoco'
apply from: 'qa-check.gradle'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.0"

    defaultConfig {
        applicationId "com.alexzh.temperatureconverter"
        minSdkVersion 14
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }
    }
}

task jacocoTestReport(type: JacocoReport, dependsOn: 'testDebugUnitTest') {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    jacocoClasspath = configurations['androidJacocoAnt']

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*',
                      '**/*Test*.*', 'android/**/*.*', '**/*_ViewBinding*.*', '**/*_MembersInjector*.*',
                      '**/*_Provide*Factory*.*', "**/*DaggerApplicationComponent*.*", "**/*Factory*.*"]
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = files(["${buildDir}/jacoco/testDebugUnitTest.exec",
                           "${buildDir}/outputs/code-coverage/connected/coverage.ec"
    ])
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    compile "com.android.support:appcompat-v7:$supportLibVersion"
    compile "com.android.support:design:$supportLibVersion"
    compile "com.android.support:preference-v14:$supportLibVersion"

    //ButterKnife
    compile "com.jakewharton:butterknife:$butterknifeLibVersion"
    apt "com.jakewharton:butterknife-compiler:$butterknifeLibVersion"

    //events
    compile "org.greenrobot:eventbus:$eventbusLibVersion"

    //di
    compile "com.google.dagger:dagger:$daggerLibVersion"
    apt "com.google.dagger:dagger-compiler:$daggerLibVersion"
    provided 'javax.annotation:jsr250-api:1.0'

    //retrofit
    compile "com.squareup.retrofit2:retrofit:$retrofitLibVersion"

    //gson
    compile "com.squareup.retrofit2:converter-gson:$retrofitLibVersion"

    //junit
    testCompile "junit:junit:$junitLibVersion"

    //mockito
    testCompile "org.mockito:mockito-core:$mockitoLibVersion"

    //espresso
    androidTestCompile("com.android.support.test.espresso:espresso-core:$espresspLibVersion") {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestCompile("com.android.support.test:runner:$testRunnerLibVirsion") {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestCompile("com.android.support.test.espresso:espresso-intents:$espresspLibVersion") {
        exclude group: 'com.android.support', module: 'support-annotations'
    }

    //uiautomator
    androidTestCompile "com.android.support.test.uiautomator:uiautomator-v18:$uiautomatorLibVersion"
}
